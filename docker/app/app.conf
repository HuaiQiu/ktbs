[server]
scheme = http
host-name = 0.0.0.0
port = 1234
threads = 2

# update the URL below to match the PUBLIC URL of kTBS
fixed-root-uri = http://localhost:1234/

# Reset connection to RDF store at every HTTP request
# (slower, but safer on some storage systems)
#reset-connection = false
# Include exception traceback in the message of 5xx errors
#send-traceback = false

[rdf_database]
# update if you want to use another RDF backend
repository = ./app/REPO
# Force kTBS to initialize repo even if it is not empty
#force-init = false

[ns_prefix]
# A namespace prefix declaration as 'prefix:uri'
# The following hack is used to define a key which will be an empty string
#_ = http://liris.cnrs.fr/silex/2009/ktbs#
#skos = http://www.w3.org/2004/02/skos/core#

[plugins]
#post_via_get = false
sparql_endpoints = true
cors = true
#stats_per_type = true

[sparql]
## WARNING: allowing scope=store in SPARQL methods grants any user
## access to the *whole* triple store. Do *not* use it if
## 1/ you intent to restrict access to some parts of your kTBS to some users, or
## 2/ you are hosting other non-public data in your triple store.
# allow-scope-store = false

[cors]
# Additional plugin options
# Space separated list of allowed origins
# Update according to your needs
allow-origin = http://localhost:8000


[logging]
# modules to log
loggers = ktbs rdfrest
# logging level on the console (DEBUG, INFO, WARNING, ERROR, CRITICAL)
console-level = WARNING
# Specify the console format
#console-format = %(levelname)s\t%(asctime)s\t%(name)s\t%(message)s

# logs can also be stored in a file
#filename =
#file-level = WARN

# or even in a trace of another kTBS
# ktbs-logurl = http://localhost:5678/logs/log1/
#ktbs-level = WARN

# a more complex logging configuration can also be provided in a JSON file
# see https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
#json-configuration-filename = ./app/logging.json
