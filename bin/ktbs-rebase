#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
http://rdflib.readthedocs.org/en/latest/persistence.html
"""
import os

from rdflib import Graph
from rdflib.graph import Dataset
from rdflib.store import VALID_STORE, CORRUPTED_STORE, NO_STORE, UNKNOWN

from argparse import ArgumentParser

import logging

STORE_TYPE = 'Sleepycat'

LOG = logging.getLogger("ktbs-rebase")

def parse_options():
    """
    Extract command line options.
    Later : add store type (if different than Sleepycat).
    """
    parser = ArgumentParser(description="Creates a new database with a kTBS base URI modified.")
    parser.add_argument("currentdb", nargs=1,
                        help="Enter the full path of the current database \
                              (path and database name)")
    parser.add_argument("newdb", nargs=1,
                        help="Enter the full path of the new database \
                              (path and database name)")
    parser.add_argument("oldURI", nargs=1,
                        help="Enter the old kTBS base URI (the one you want to change)")
    parser.add_argument("newURI", nargs=1,
                        help="Entre the new kTBS URI")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Display print messages")

    options = {}
    options = parser.parse_args()

    if options.verbose:
        LOG.setLevel(logging.DEBUG)

    # In case of parsing errors, the program execution is stopped
    LOG.info("Parsed with argparse: %s" % str(options))

    return options

def check_arguments(options=None):
    """Check that we have valid parameters.
    :param options: The Namespace object returned by parse_arg.
    """
    if not os.path.isdir(options.currentdb[0]):
        LOG.info("%s is not a valid original database path" % options.currentdb[0])
        return False

    if not os.path.exists(options.newdb[0]):
        if not os.path.isdir(os.path.dirname(options.newdb[0])):
            LOG.info("%s is not a valid destination database path" % options.newdb[0])
            return False

    # TODO : Add a control on valid URI ?
    # options.oldURI[0]
    # options.newURI[0]

    return True

def show_graph(gpath=None, gid=None):
    """
    Display the identified STORE_TYPE (Sleepycat for the moment) graph.

    :param gpath: the full path of the store database.
    :param gid: the URI of the graph.

    http://answers.semanticweb.com/questions/24797/rdflib-persistence/24803
    Sleepycat is a store for named graphs (or datasets), it will keep track 
    of what graph a triple is in. When you create a Graph a random ID is 
    generated - if you create a NEW graph, the ID will be different.
    """
    graph = Graph(store=STORE_TYPE, identifier=gid)

    # first time create the store:
    etat = graph.open(gpath, create=False)

    if etat == VALID_STORE:
        print "Le store Sleepycat {sp} est valide".format(sp=gpath)

        print "Nb éléments du graphe : ", len(graph)
        for subj, pred, obj in graph:
            print subj, pred, obj

    graph.close()

def show_all_graphs():
    """
    http://rdflib.readthedocs.org/en/latest/apidocs/rdflib.html#rdflib.graph.Dataset
    """
    graph = Graph(store=STORE_TYPE, identifier=gid)

if __name__ == '__main__':
    logging.basicConfig()
    args = parse_options()
    if check_arguments(args):
        show_graph(args.currentdb[0], gid=args.oldURI[0])
